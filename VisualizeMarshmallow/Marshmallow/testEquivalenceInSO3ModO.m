n = randi(50);
r1 = (rand(n,3)-.5)*50;
r2 = (rand(n,3)-.5)*50;
[zs, ds] = equivalenceInSO3ModO(r1, r2);

for i = 1:n
    [zi, di] = equivalenceInSO3ModO(r1(i,:), r2(i,:));
    assert(abs(zs(i)-zi)<.000001);
    assert(abs(ds(i)-di)<.000001);
end

ORots = ...
    [[1 0 0 0];...
    [0 0 1 pi/2];...
    [0 1 0 pi/2];...
    [1 0 0 pi/2];...
    [0 0 1 -pi/2];...
    [0 1 0 -pi/2];...
    [1 0 0 -pi/2];...
    [1 1 1 2*pi/3];...
    [1 1 -1 2*pi/3];...
    [1 -1 1 2*pi/3];...
    [1 -1 -1 2*pi/3];...
    [-1 1 1 2*pi/3];...
    [-1 1 -1 2*pi/3];...
    [-1 -1 1 2*pi/3];...
    [-1 -1 -1 2*pi/3];...
    [1 1 0 pi];...
    [1 0 1 pi];...
    [0 1 1 pi];...
    [1 -1 0 pi];...
    [1 0 -1 pi];...
    [0 1 -1 pi];...
    [-1 1 0 pi];...
    [-1 0 1 pi];...
    [0 -1 1 pi];...
    [-1 -1 0 pi];...
    [-1 0 -1 pi];...
    [0 -1 -1 pi]...
    ];
nO = size(ORots,1);

for i = 1:n
    j = randi(nO);
    aa = r1(i,:);
    
    q1 = quat2axang(quatmultiply(axang2quat(ORots(j,:)), axang2quat([aa norm(aa)])));
    [zi, di] = equivalenceInSO3ModO(aa, q1(1:3)*q1(4));
    assert(zi)
    assert(di<.000001)
    [zi, di] = equivalenceInSO3ModO(q1(1:3)*q1(4), aa);
    assert(zi)
    assert(di<.000001)
end

[zi, di] = equivalenceInSO3ModO(aa, aa);
assert(zi)
assert(di<.000001)

